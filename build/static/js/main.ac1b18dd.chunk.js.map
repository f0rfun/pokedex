{"version":3,"sources":["components/PokemonCard.jsx","components/PokemonGallery.jsx","App.js","serviceWorker.js","index.js"],"names":["PokemonCard","pokemons","map","pokemon","index","key","className","src","data","id","alt","name","types","type","classType","stats","reverse","stat","base_stat","PokemonGallery","useState","updateData","isLoading","setIsLoading","error","setIsError","useEffect","a","axios","get","allPokemons","Promise","all","results","url","pokemonData","message","response","isError","getData","FetchPokemonData","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ac1b18dd.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst getPokemonType = (types) => {\r\n  return types.map((type) => {\r\n    let classType = \"\";\r\n    switch (type[\"type\"][\"name\"]) {\r\n      case \"water\":\r\n        classType = \"water\";\r\n        break;\r\n      case \"fire\":\r\n        classType = \"fire\";\r\n        break;\r\n      case \"grass\":\r\n        classType = \"grass\";\r\n        break;\r\n      case \"fairy\":\r\n        classType = \"fairy\";\r\n        break;\r\n      case \"poison\":\r\n        classType = \"poison\";\r\n        break;\r\n      case \"flying\":\r\n      case \"dragon\":\r\n        classType = \"flying\";\r\n        break;\r\n      case \"psychic\":\r\n        classType = \"psychic\";\r\n        break;\r\n      case \"steel\":\r\n        classType = \"steel\";\r\n        break;\r\n      case \"electric\":\r\n        classType = \"electric\";\r\n        break;\r\n      case \"bug\":\r\n      case \"ground\":\r\n        classType = \"bug\";\r\n        break;\r\n      case \"ice\":\r\n      case \"ghost\":\r\n        classType = \"ice\";\r\n        break;\r\n      case \"fighting\":\r\n        classType = \"fighting\";\r\n        break;\r\n      case \"rock\":\r\n        classType = \"rock\";\r\n        break;\r\n      default:\r\n        classType = \"normal\";\r\n    }\r\n    return (\r\n      <span className={classType}>\r\n        <b>{type[\"type\"][\"name\"]}</b>\r\n      </span>\r\n    );\r\n  });\r\n};\r\n\r\nconst getPokemonStats = (stats) => {\r\n  return stats.reverse().map((stat) => {\r\n    return (\r\n      <p className=\"statsText\">\r\n        <b>\r\n          {stat[\"stat\"][\"name\"]}: {stat.base_stat}\r\n        </b>\r\n      </p>\r\n    );\r\n  });\r\n};\r\n\r\nconst PokemonCard = ({ pokemons }) => (\r\n  <Fragment>\r\n    {pokemons.map((pokemon, index) => (\r\n      <div key={index} className=\"grid\">\r\n        <div className=\"statsOverlay\"></div>\r\n        <img\r\n          src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.data.id}.png`}\r\n          alt={`${pokemon.data.id}_image`}\r\n        />\r\n        <div className=\"gridBody\">\r\n          <div className=\"relative\">\r\n            <h1 className=\"pokemonName\">{pokemon.data.name}</h1>\r\n            <div>{getPokemonType(pokemon.data.types)}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"statsDetails fadeIn-bottom\">\r\n          <div className=\"statsContainer\">\r\n            {getPokemonStats(pokemon.data.stats)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ))}\r\n  </Fragment>\r\n);\r\n\r\nexport default PokemonCard;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\nimport axios from \"axios\";\r\nimport \"../App.css\";\r\n\r\nconst FetchPokemonData = () => {\r\n  /*\r\n    The effect hook called useEffect is used to fetch the data with axios from the API\r\n    and to set the data in the local state of the component with the state hook's update function. \r\n    The promise resolving happens with async/await.\r\n    \r\n    However, when you run your application, you should stumble into a nasty loop. \r\n    The effect hook runs when the component mounts but also when the component updates. \r\n    Because we are setting the state after every data fetch, the component updates and the effect runs again. \r\n    It fetches the data again and again. That's a bug and needs to be avoided. \r\n    We only want to fetch data when the component mounts. \r\n    That's why you can provide an empty array as second argument to the effect hook to avoid activating it \r\n    on component updates but only for the mounting of the component.\r\n     */\r\n\r\n  const [data, updateData] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setIsError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      setIsError(false);\r\n      setIsLoading(true);\r\n      try {\r\n        const allPokemons = await axios.get(\r\n          \"https://pokeapi.co/api/v2/pokemon?limit=151\"\r\n        );\r\n\r\n        const pokemonData = await Promise.all(\r\n          allPokemons.data.results.map((pokemon) => axios.get(pokemon.url))\r\n        );\r\n\r\n        updateData(pokemonData);\r\n      } catch (e) {\r\n        setIsError({ message: e.response.data, isError: true });\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n    getData();\r\n  }, []);\r\n  return [{ data, isLoading, error }];\r\n};\r\n\r\nconst PokemonGallery = () => {\r\n  const [{ data, isLoading, error }] = FetchPokemonData();\r\n\r\n  return (\r\n    <Fragment>\r\n      {error.isError && <div>{error.message}</div>}\r\n      {isLoading ? (\r\n        <div className=\"loadingContainer\">\r\n          <div id=\"floatingBarsG\">\r\n            <div class=\"blockG\" id=\"rotateG_01\"></div>\r\n            <div class=\"blockG\" id=\"rotateG_02\"></div>\r\n            <div class=\"blockG\" id=\"rotateG_03\"></div>\r\n            <div class=\"blockG\" id=\"rotateG_04\"></div>\r\n            <div class=\"blockG\" id=\"rotateG_05\"></div>\r\n            <div class=\"blockG\" id=\"rotateG_06\"></div>\r\n            <div class=\"blockG\" id=\"rotateG_07\"></div>\r\n            <div class=\"blockG\" id=\"rotateG_08\"></div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        data && (\r\n          <div className=\"masonry\">\r\n            <PokemonCard pokemons={data} />\r\n          </div>\r\n        )\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PokemonGallery;\r\n","import React from \"react\";\nimport PokemonGallery from \"./components/PokemonGallery\";\nimport \"./App.css\";\n\nfunction App() {\n  return <PokemonGallery />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}